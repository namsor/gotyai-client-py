# coding: utf-8

"""
    Gotyai API v3

    Gotyai API : the Spartan explainable AI   # noqa: E501

    The version of the OpenAPI document: 3.0.2
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gotyai_client import schemas  # noqa: F401


class SoftwareVersionOut(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            softwareNameAndVersion = schemas.StrSchema
            
            
            class softwareVersion(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.Int32Schema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'softwareVersion':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "softwareNameAndVersion": softwareNameAndVersion,
                "softwareVersion": softwareVersion,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["softwareNameAndVersion"]) -> MetaOapg.properties.softwareNameAndVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["softwareVersion"]) -> MetaOapg.properties.softwareVersion: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["softwareNameAndVersion", "softwareVersion", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["softwareNameAndVersion"]) -> typing.Union[MetaOapg.properties.softwareNameAndVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["softwareVersion"]) -> typing.Union[MetaOapg.properties.softwareVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["softwareNameAndVersion", "softwareVersion", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        softwareNameAndVersion: typing.Union[MetaOapg.properties.softwareNameAndVersion, str, schemas.Unset] = schemas.unset,
        softwareVersion: typing.Union[MetaOapg.properties.softwareVersion, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SoftwareVersionOut':
        return super().__new__(
            cls,
            *_args,
            softwareNameAndVersion=softwareNameAndVersion,
            softwareVersion=softwareVersion,
            _configuration=_configuration,
            **kwargs,
        )
