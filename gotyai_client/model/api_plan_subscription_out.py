# coding: utf-8

"""
    Gotyai API v3

    Gotyai API : the Spartan explainable AI   # noqa: E501

    The version of the OpenAPI document: 3.0.2
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gotyai_client import schemas  # noqa: F401


class APIPlanSubscriptionOut(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The API Plan governing the subscription.
    """


    class MetaOapg:
        
        class properties:
            apiKey = schemas.StrSchema
            planStarted = schemas.Int64Schema
            priorPlanStarted = schemas.Int64Schema
            planEnded = schemas.Int64Schema
            taxRate = schemas.Float64Schema
            planName = schemas.StrSchema
            planBaseFeesKey = schemas.StrSchema
            planStatus = schemas.StrSchema
            planQuota = schemas.Int64Schema
            priceUSD = schemas.Float64Schema
            priceOverageUSD = schemas.Float64Schema
            price = schemas.Float64Schema
            priceOverage = schemas.Float64Schema
            currency = schemas.StrSchema
            currencyFactor = schemas.Float64Schema
            stripeCustomerId = schemas.StrSchema
            stripeStatus = schemas.StrSchema
            stripeSubscription = schemas.StrSchema
            userId = schemas.StrSchema
            __annotations__ = {
                "apiKey": apiKey,
                "planStarted": planStarted,
                "priorPlanStarted": priorPlanStarted,
                "planEnded": planEnded,
                "taxRate": taxRate,
                "planName": planName,
                "planBaseFeesKey": planBaseFeesKey,
                "planStatus": planStatus,
                "planQuota": planQuota,
                "priceUSD": priceUSD,
                "priceOverageUSD": priceOverageUSD,
                "price": price,
                "priceOverage": priceOverage,
                "currency": currency,
                "currencyFactor": currencyFactor,
                "stripeCustomerId": stripeCustomerId,
                "stripeStatus": stripeStatus,
                "stripeSubscription": stripeSubscription,
                "userId": userId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiKey"]) -> MetaOapg.properties.apiKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planStarted"]) -> MetaOapg.properties.planStarted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priorPlanStarted"]) -> MetaOapg.properties.priorPlanStarted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planEnded"]) -> MetaOapg.properties.planEnded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxRate"]) -> MetaOapg.properties.taxRate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planName"]) -> MetaOapg.properties.planName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planBaseFeesKey"]) -> MetaOapg.properties.planBaseFeesKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planStatus"]) -> MetaOapg.properties.planStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planQuota"]) -> MetaOapg.properties.planQuota: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceUSD"]) -> MetaOapg.properties.priceUSD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceOverageUSD"]) -> MetaOapg.properties.priceOverageUSD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceOverage"]) -> MetaOapg.properties.priceOverage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currencyFactor"]) -> MetaOapg.properties.currencyFactor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stripeCustomerId"]) -> MetaOapg.properties.stripeCustomerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stripeStatus"]) -> MetaOapg.properties.stripeStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stripeSubscription"]) -> MetaOapg.properties.stripeSubscription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["apiKey", "planStarted", "priorPlanStarted", "planEnded", "taxRate", "planName", "planBaseFeesKey", "planStatus", "planQuota", "priceUSD", "priceOverageUSD", "price", "priceOverage", "currency", "currencyFactor", "stripeCustomerId", "stripeStatus", "stripeSubscription", "userId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiKey"]) -> typing.Union[MetaOapg.properties.apiKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planStarted"]) -> typing.Union[MetaOapg.properties.planStarted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priorPlanStarted"]) -> typing.Union[MetaOapg.properties.priorPlanStarted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planEnded"]) -> typing.Union[MetaOapg.properties.planEnded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxRate"]) -> typing.Union[MetaOapg.properties.taxRate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planName"]) -> typing.Union[MetaOapg.properties.planName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planBaseFeesKey"]) -> typing.Union[MetaOapg.properties.planBaseFeesKey, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planStatus"]) -> typing.Union[MetaOapg.properties.planStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planQuota"]) -> typing.Union[MetaOapg.properties.planQuota, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceUSD"]) -> typing.Union[MetaOapg.properties.priceUSD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceOverageUSD"]) -> typing.Union[MetaOapg.properties.priceOverageUSD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceOverage"]) -> typing.Union[MetaOapg.properties.priceOverage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currencyFactor"]) -> typing.Union[MetaOapg.properties.currencyFactor, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stripeCustomerId"]) -> typing.Union[MetaOapg.properties.stripeCustomerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stripeStatus"]) -> typing.Union[MetaOapg.properties.stripeStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stripeSubscription"]) -> typing.Union[MetaOapg.properties.stripeSubscription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["apiKey", "planStarted", "priorPlanStarted", "planEnded", "taxRate", "planName", "planBaseFeesKey", "planStatus", "planQuota", "priceUSD", "priceOverageUSD", "price", "priceOverage", "currency", "currencyFactor", "stripeCustomerId", "stripeStatus", "stripeSubscription", "userId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        apiKey: typing.Union[MetaOapg.properties.apiKey, str, schemas.Unset] = schemas.unset,
        planStarted: typing.Union[MetaOapg.properties.planStarted, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        priorPlanStarted: typing.Union[MetaOapg.properties.priorPlanStarted, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        planEnded: typing.Union[MetaOapg.properties.planEnded, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        taxRate: typing.Union[MetaOapg.properties.taxRate, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        planName: typing.Union[MetaOapg.properties.planName, str, schemas.Unset] = schemas.unset,
        planBaseFeesKey: typing.Union[MetaOapg.properties.planBaseFeesKey, str, schemas.Unset] = schemas.unset,
        planStatus: typing.Union[MetaOapg.properties.planStatus, str, schemas.Unset] = schemas.unset,
        planQuota: typing.Union[MetaOapg.properties.planQuota, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        priceUSD: typing.Union[MetaOapg.properties.priceUSD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        priceOverageUSD: typing.Union[MetaOapg.properties.priceOverageUSD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        priceOverage: typing.Union[MetaOapg.properties.priceOverage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        currencyFactor: typing.Union[MetaOapg.properties.currencyFactor, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        stripeCustomerId: typing.Union[MetaOapg.properties.stripeCustomerId, str, schemas.Unset] = schemas.unset,
        stripeStatus: typing.Union[MetaOapg.properties.stripeStatus, str, schemas.Unset] = schemas.unset,
        stripeSubscription: typing.Union[MetaOapg.properties.stripeSubscription, str, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'APIPlanSubscriptionOut':
        return super().__new__(
            cls,
            *_args,
            apiKey=apiKey,
            planStarted=planStarted,
            priorPlanStarted=priorPlanStarted,
            planEnded=planEnded,
            taxRate=taxRate,
            planName=planName,
            planBaseFeesKey=planBaseFeesKey,
            planStatus=planStatus,
            planQuota=planQuota,
            priceUSD=priceUSD,
            priceOverageUSD=priceOverageUSD,
            price=price,
            priceOverage=priceOverage,
            currency=currency,
            currencyFactor=currencyFactor,
            stripeCustomerId=stripeCustomerId,
            stripeStatus=stripeStatus,
            stripeSubscription=stripeSubscription,
            userId=userId,
            _configuration=_configuration,
            **kwargs,
        )
