# coding: utf-8

"""
    Gotyai API v3

    Gotyai API : the Spartan explainable AI   # noqa: E501

    The version of the OpenAPI document: 3.0.2
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gotyai_client import schemas  # noqa: F401


class APIPeriodUsageOut(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def subscription() -> typing.Type['APIPlanSubscriptionOut']:
                return APIPlanSubscriptionOut
        
            @staticmethod
            def billingPeriod() -> typing.Type['APIBillingPeriodUsageOut']:
                return APIBillingPeriodUsageOut
            overageExclTax = schemas.Float64Schema
            overageInclTax = schemas.Float64Schema
            overageCurrency = schemas.StrSchema
            overageQuantity = schemas.Int64Schema
            __annotations__ = {
                "subscription": subscription,
                "billingPeriod": billingPeriod,
                "overageExclTax": overageExclTax,
                "overageInclTax": overageInclTax,
                "overageCurrency": overageCurrency,
                "overageQuantity": overageQuantity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription"]) -> 'APIPlanSubscriptionOut': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingPeriod"]) -> 'APIBillingPeriodUsageOut': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overageExclTax"]) -> MetaOapg.properties.overageExclTax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overageInclTax"]) -> MetaOapg.properties.overageInclTax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overageCurrency"]) -> MetaOapg.properties.overageCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["overageQuantity"]) -> MetaOapg.properties.overageQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["subscription", "billingPeriod", "overageExclTax", "overageInclTax", "overageCurrency", "overageQuantity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription"]) -> typing.Union['APIPlanSubscriptionOut', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingPeriod"]) -> typing.Union['APIBillingPeriodUsageOut', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overageExclTax"]) -> typing.Union[MetaOapg.properties.overageExclTax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overageInclTax"]) -> typing.Union[MetaOapg.properties.overageInclTax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overageCurrency"]) -> typing.Union[MetaOapg.properties.overageCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["overageQuantity"]) -> typing.Union[MetaOapg.properties.overageQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subscription", "billingPeriod", "overageExclTax", "overageInclTax", "overageCurrency", "overageQuantity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        subscription: typing.Union['APIPlanSubscriptionOut', schemas.Unset] = schemas.unset,
        billingPeriod: typing.Union['APIBillingPeriodUsageOut', schemas.Unset] = schemas.unset,
        overageExclTax: typing.Union[MetaOapg.properties.overageExclTax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        overageInclTax: typing.Union[MetaOapg.properties.overageInclTax, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        overageCurrency: typing.Union[MetaOapg.properties.overageCurrency, str, schemas.Unset] = schemas.unset,
        overageQuantity: typing.Union[MetaOapg.properties.overageQuantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'APIPeriodUsageOut':
        return super().__new__(
            cls,
            *_args,
            subscription=subscription,
            billingPeriod=billingPeriod,
            overageExclTax=overageExclTax,
            overageInclTax=overageInclTax,
            overageCurrency=overageCurrency,
            overageQuantity=overageQuantity,
            _configuration=_configuration,
            **kwargs,
        )

from gotyai_client.model.api_billing_period_usage_out import APIBillingPeriodUsageOut
from gotyai_client.model.api_plan_subscription_out import APIPlanSubscriptionOut
