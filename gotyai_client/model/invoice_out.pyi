# coding: utf-8

"""
    Gotyai API v3

    Gotyai API : the Spartan explainable AI   # noqa: E501

    The version of the OpenAPI document: 3.0.2
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gotyai_client import schemas  # noqa: F401


class InvoiceOut(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    List of Corporate invoices
    """


    class MetaOapg:
        
        class properties:
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['InvoiceItemOut']:
                        return InvoiceItemOut
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['InvoiceItemOut'], typing.List['InvoiceItemOut']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'InvoiceItemOut':
                    return super().__getitem__(i)
            userId = schemas.StrSchema
            invoiceId = schemas.StrSchema
            isStriped = schemas.BoolSchema
            stripeCustomerId = schemas.StrSchema
            amountDue = schemas.Int64Schema
            amountPaid = schemas.Int64Schema
            amountRemaining = schemas.Int64Schema
            attempted = schemas.BoolSchema
            currency = schemas.StrSchema
            invoiceDate = schemas.DateTimeSchema
            dueDate = schemas.DateTimeSchema
            description = schemas.StrSchema
            invoicePdf = schemas.StrSchema
            periodStart = schemas.DateTimeSchema
            periodEnd = schemas.DateTimeSchema
            receiptNumber = schemas.StrSchema
            invoiceStatus = schemas.StrSchema
            subTotal = schemas.Int64Schema
            tax = schemas.Int64Schema
            taxPercent = schemas.Int64Schema
            total = schemas.Int64Schema
            __annotations__ = {
                "items": items,
                "userId": userId,
                "invoiceId": invoiceId,
                "isStriped": isStriped,
                "stripeCustomerId": stripeCustomerId,
                "amountDue": amountDue,
                "amountPaid": amountPaid,
                "amountRemaining": amountRemaining,
                "attempted": attempted,
                "currency": currency,
                "invoiceDate": invoiceDate,
                "dueDate": dueDate,
                "description": description,
                "invoicePdf": invoicePdf,
                "periodStart": periodStart,
                "periodEnd": periodEnd,
                "receiptNumber": receiptNumber,
                "invoiceStatus": invoiceStatus,
                "subTotal": subTotal,
                "tax": tax,
                "taxPercent": taxPercent,
                "total": total,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userId"]) -> MetaOapg.properties.userId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoiceId"]) -> MetaOapg.properties.invoiceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isStriped"]) -> MetaOapg.properties.isStriped: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stripeCustomerId"]) -> MetaOapg.properties.stripeCustomerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountDue"]) -> MetaOapg.properties.amountDue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountPaid"]) -> MetaOapg.properties.amountPaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amountRemaining"]) -> MetaOapg.properties.amountRemaining: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attempted"]) -> MetaOapg.properties.attempted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoiceDate"]) -> MetaOapg.properties.invoiceDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dueDate"]) -> MetaOapg.properties.dueDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoicePdf"]) -> MetaOapg.properties.invoicePdf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodStart"]) -> MetaOapg.properties.periodStart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodEnd"]) -> MetaOapg.properties.periodEnd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["receiptNumber"]) -> MetaOapg.properties.receiptNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoiceStatus"]) -> MetaOapg.properties.invoiceStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subTotal"]) -> MetaOapg.properties.subTotal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tax"]) -> MetaOapg.properties.tax: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxPercent"]) -> MetaOapg.properties.taxPercent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["items", "userId", "invoiceId", "isStriped", "stripeCustomerId", "amountDue", "amountPaid", "amountRemaining", "attempted", "currency", "invoiceDate", "dueDate", "description", "invoicePdf", "periodStart", "periodEnd", "receiptNumber", "invoiceStatus", "subTotal", "tax", "taxPercent", "total", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userId"]) -> typing.Union[MetaOapg.properties.userId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoiceId"]) -> typing.Union[MetaOapg.properties.invoiceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isStriped"]) -> typing.Union[MetaOapg.properties.isStriped, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stripeCustomerId"]) -> typing.Union[MetaOapg.properties.stripeCustomerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountDue"]) -> typing.Union[MetaOapg.properties.amountDue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountPaid"]) -> typing.Union[MetaOapg.properties.amountPaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amountRemaining"]) -> typing.Union[MetaOapg.properties.amountRemaining, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attempted"]) -> typing.Union[MetaOapg.properties.attempted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoiceDate"]) -> typing.Union[MetaOapg.properties.invoiceDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dueDate"]) -> typing.Union[MetaOapg.properties.dueDate, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoicePdf"]) -> typing.Union[MetaOapg.properties.invoicePdf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodStart"]) -> typing.Union[MetaOapg.properties.periodStart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodEnd"]) -> typing.Union[MetaOapg.properties.periodEnd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["receiptNumber"]) -> typing.Union[MetaOapg.properties.receiptNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoiceStatus"]) -> typing.Union[MetaOapg.properties.invoiceStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subTotal"]) -> typing.Union[MetaOapg.properties.subTotal, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tax"]) -> typing.Union[MetaOapg.properties.tax, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxPercent"]) -> typing.Union[MetaOapg.properties.taxPercent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> typing.Union[MetaOapg.properties.total, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["items", "userId", "invoiceId", "isStriped", "stripeCustomerId", "amountDue", "amountPaid", "amountRemaining", "attempted", "currency", "invoiceDate", "dueDate", "description", "invoicePdf", "periodStart", "periodEnd", "receiptNumber", "invoiceStatus", "subTotal", "tax", "taxPercent", "total", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        items: typing.Union[MetaOapg.properties.items, list, tuple, schemas.Unset] = schemas.unset,
        userId: typing.Union[MetaOapg.properties.userId, str, schemas.Unset] = schemas.unset,
        invoiceId: typing.Union[MetaOapg.properties.invoiceId, str, schemas.Unset] = schemas.unset,
        isStriped: typing.Union[MetaOapg.properties.isStriped, bool, schemas.Unset] = schemas.unset,
        stripeCustomerId: typing.Union[MetaOapg.properties.stripeCustomerId, str, schemas.Unset] = schemas.unset,
        amountDue: typing.Union[MetaOapg.properties.amountDue, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        amountPaid: typing.Union[MetaOapg.properties.amountPaid, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        amountRemaining: typing.Union[MetaOapg.properties.amountRemaining, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        attempted: typing.Union[MetaOapg.properties.attempted, bool, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        invoiceDate: typing.Union[MetaOapg.properties.invoiceDate, str, datetime, schemas.Unset] = schemas.unset,
        dueDate: typing.Union[MetaOapg.properties.dueDate, str, datetime, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        invoicePdf: typing.Union[MetaOapg.properties.invoicePdf, str, schemas.Unset] = schemas.unset,
        periodStart: typing.Union[MetaOapg.properties.periodStart, str, datetime, schemas.Unset] = schemas.unset,
        periodEnd: typing.Union[MetaOapg.properties.periodEnd, str, datetime, schemas.Unset] = schemas.unset,
        receiptNumber: typing.Union[MetaOapg.properties.receiptNumber, str, schemas.Unset] = schemas.unset,
        invoiceStatus: typing.Union[MetaOapg.properties.invoiceStatus, str, schemas.Unset] = schemas.unset,
        subTotal: typing.Union[MetaOapg.properties.subTotal, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tax: typing.Union[MetaOapg.properties.tax, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        taxPercent: typing.Union[MetaOapg.properties.taxPercent, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InvoiceOut':
        return super().__new__(
            cls,
            *_args,
            items=items,
            userId=userId,
            invoiceId=invoiceId,
            isStriped=isStriped,
            stripeCustomerId=stripeCustomerId,
            amountDue=amountDue,
            amountPaid=amountPaid,
            amountRemaining=amountRemaining,
            attempted=attempted,
            currency=currency,
            invoiceDate=invoiceDate,
            dueDate=dueDate,
            description=description,
            invoicePdf=invoicePdf,
            periodStart=periodStart,
            periodEnd=periodEnd,
            receiptNumber=receiptNumber,
            invoiceStatus=invoiceStatus,
            subTotal=subTotal,
            tax=tax,
            taxPercent=taxPercent,
            total=total,
            _configuration=_configuration,
            **kwargs,
        )

from gotyai_client.model.invoice_item_out import InvoiceItemOut
