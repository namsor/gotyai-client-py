# coding: utf-8

"""
    Gotyai API v3

    Gotyai API : the Spartan explainable AI   # noqa: E501

    The version of the OpenAPI document: 3.0.2
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gotyai_client import schemas  # noqa: F401


class APIPlanOut(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The list of available API Plans.
    """


    class MetaOapg:
        
        class properties:
            planName = schemas.StrSchema
            planQuota = schemas.Int64Schema
            price = schemas.Float64Schema
            priceOverage = schemas.Float64Schema
            __annotations__ = {
                "planName": planName,
                "planQuota": planQuota,
                "price": price,
                "priceOverage": priceOverage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planName"]) -> MetaOapg.properties.planName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planQuota"]) -> MetaOapg.properties.planQuota: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceOverage"]) -> MetaOapg.properties.priceOverage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["planName", "planQuota", "price", "priceOverage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planName"]) -> typing.Union[MetaOapg.properties.planName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planQuota"]) -> typing.Union[MetaOapg.properties.planQuota, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceOverage"]) -> typing.Union[MetaOapg.properties.priceOverage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["planName", "planQuota", "price", "priceOverage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        planName: typing.Union[MetaOapg.properties.planName, str, schemas.Unset] = schemas.unset,
        planQuota: typing.Union[MetaOapg.properties.planQuota, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        priceOverage: typing.Union[MetaOapg.properties.priceOverage, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'APIPlanOut':
        return super().__new__(
            cls,
            *_args,
            planName=planName,
            planQuota=planQuota,
            price=price,
            priceOverage=priceOverage,
            _configuration=_configuration,
            **kwargs,
        )
