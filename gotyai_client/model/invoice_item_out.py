# coding: utf-8

"""
    Gotyai API v3

    Gotyai API : the Spartan explainable AI   # noqa: E501

    The version of the OpenAPI document: 3.0.2
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gotyai_client import schemas  # noqa: F401


class InvoiceItemOut(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The invoice items
    """


    class MetaOapg:
        
        class properties:
            itemId = schemas.StrSchema
            amount = schemas.Int64Schema
            currency = schemas.StrSchema
            description = schemas.StrSchema
            quantity = schemas.Int64Schema
            subscription = schemas.StrSchema
            subscriptionItem = schemas.StrSchema
            invoiceItemType = schemas.StrSchema
            planNickname = schemas.StrSchema
            planDesc = schemas.StrSchema
            planName = schemas.StrSchema
            __annotations__ = {
                "itemId": itemId,
                "amount": amount,
                "currency": currency,
                "description": description,
                "quantity": quantity,
                "subscription": subscription,
                "subscriptionItem": subscriptionItem,
                "invoiceItemType": invoiceItemType,
                "planNickname": planNickname,
                "planDesc": planDesc,
                "planName": planName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["itemId"]) -> MetaOapg.properties.itemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription"]) -> MetaOapg.properties.subscription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscriptionItem"]) -> MetaOapg.properties.subscriptionItem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoiceItemType"]) -> MetaOapg.properties.invoiceItemType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planNickname"]) -> MetaOapg.properties.planNickname: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planDesc"]) -> MetaOapg.properties.planDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planName"]) -> MetaOapg.properties.planName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["itemId", "amount", "currency", "description", "quantity", "subscription", "subscriptionItem", "invoiceItemType", "planNickname", "planDesc", "planName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["itemId"]) -> typing.Union[MetaOapg.properties.itemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription"]) -> typing.Union[MetaOapg.properties.subscription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscriptionItem"]) -> typing.Union[MetaOapg.properties.subscriptionItem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoiceItemType"]) -> typing.Union[MetaOapg.properties.invoiceItemType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planNickname"]) -> typing.Union[MetaOapg.properties.planNickname, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planDesc"]) -> typing.Union[MetaOapg.properties.planDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planName"]) -> typing.Union[MetaOapg.properties.planName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["itemId", "amount", "currency", "description", "quantity", "subscription", "subscriptionItem", "invoiceItemType", "planNickname", "planDesc", "planName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        itemId: typing.Union[MetaOapg.properties.itemId, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        subscription: typing.Union[MetaOapg.properties.subscription, str, schemas.Unset] = schemas.unset,
        subscriptionItem: typing.Union[MetaOapg.properties.subscriptionItem, str, schemas.Unset] = schemas.unset,
        invoiceItemType: typing.Union[MetaOapg.properties.invoiceItemType, str, schemas.Unset] = schemas.unset,
        planNickname: typing.Union[MetaOapg.properties.planNickname, str, schemas.Unset] = schemas.unset,
        planDesc: typing.Union[MetaOapg.properties.planDesc, str, schemas.Unset] = schemas.unset,
        planName: typing.Union[MetaOapg.properties.planName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InvoiceItemOut':
        return super().__new__(
            cls,
            *_args,
            itemId=itemId,
            amount=amount,
            currency=currency,
            description=description,
            quantity=quantity,
            subscription=subscription,
            subscriptionItem=subscriptionItem,
            invoiceItemType=invoiceItemType,
            planNickname=planNickname,
            planDesc=planDesc,
            planName=planName,
            _configuration=_configuration,
            **kwargs,
        )
