# coding: utf-8

"""
    Gotyai API v3

    Gotyai API : the Spartan explainable AI   # noqa: E501

    The version of the OpenAPI document: 3.0.2
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gotyai_client import schemas  # noqa: F401


class APICounterV2Out(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Detailed usage as reported by the deduplicating API counter.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def apiKey() -> typing.Type['APIKeyOut']:
                return APIKeyOut
            apiService = schemas.StrSchema
            hostAddress = schemas.StrSchema
            createdDateTime = schemas.Int64Schema
            totalUsage = schemas.Int64Schema
            lastFlushedDateTime = schemas.Int64Schema
            lastUsedDateTime = schemas.Int64Schema
            
            
            class serviceFeaturesUsage(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.Int64Schema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, decimal.Decimal, int, ],
                ) -> 'serviceFeaturesUsage':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "apiKey": apiKey,
                "apiService": apiService,
                "hostAddress": hostAddress,
                "createdDateTime": createdDateTime,
                "totalUsage": totalUsage,
                "lastFlushedDateTime": lastFlushedDateTime,
                "lastUsedDateTime": lastUsedDateTime,
                "serviceFeaturesUsage": serviceFeaturesUsage,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiKey"]) -> 'APIKeyOut': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiService"]) -> MetaOapg.properties.apiService: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostAddress"]) -> MetaOapg.properties.hostAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdDateTime"]) -> MetaOapg.properties.createdDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalUsage"]) -> MetaOapg.properties.totalUsage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastFlushedDateTime"]) -> MetaOapg.properties.lastFlushedDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastUsedDateTime"]) -> MetaOapg.properties.lastUsedDateTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceFeaturesUsage"]) -> MetaOapg.properties.serviceFeaturesUsage: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["apiKey", "apiService", "hostAddress", "createdDateTime", "totalUsage", "lastFlushedDateTime", "lastUsedDateTime", "serviceFeaturesUsage", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiKey"]) -> typing.Union['APIKeyOut', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiService"]) -> typing.Union[MetaOapg.properties.apiService, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostAddress"]) -> typing.Union[MetaOapg.properties.hostAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdDateTime"]) -> typing.Union[MetaOapg.properties.createdDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalUsage"]) -> typing.Union[MetaOapg.properties.totalUsage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastFlushedDateTime"]) -> typing.Union[MetaOapg.properties.lastFlushedDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastUsedDateTime"]) -> typing.Union[MetaOapg.properties.lastUsedDateTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceFeaturesUsage"]) -> typing.Union[MetaOapg.properties.serviceFeaturesUsage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["apiKey", "apiService", "hostAddress", "createdDateTime", "totalUsage", "lastFlushedDateTime", "lastUsedDateTime", "serviceFeaturesUsage", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        apiKey: typing.Union['APIKeyOut', schemas.Unset] = schemas.unset,
        apiService: typing.Union[MetaOapg.properties.apiService, str, schemas.Unset] = schemas.unset,
        hostAddress: typing.Union[MetaOapg.properties.hostAddress, str, schemas.Unset] = schemas.unset,
        createdDateTime: typing.Union[MetaOapg.properties.createdDateTime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        totalUsage: typing.Union[MetaOapg.properties.totalUsage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lastFlushedDateTime: typing.Union[MetaOapg.properties.lastFlushedDateTime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        lastUsedDateTime: typing.Union[MetaOapg.properties.lastUsedDateTime, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        serviceFeaturesUsage: typing.Union[MetaOapg.properties.serviceFeaturesUsage, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'APICounterV2Out':
        return super().__new__(
            cls,
            *_args,
            apiKey=apiKey,
            apiService=apiService,
            hostAddress=hostAddress,
            createdDateTime=createdDateTime,
            totalUsage=totalUsage,
            lastFlushedDateTime=lastFlushedDateTime,
            lastUsedDateTime=lastUsedDateTime,
            serviceFeaturesUsage=serviceFeaturesUsage,
            _configuration=_configuration,
            **kwargs,
        )

from gotyai_client.model.api_key_out import APIKeyOut
