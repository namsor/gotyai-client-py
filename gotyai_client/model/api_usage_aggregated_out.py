# coding: utf-8

"""
    Gotyai API v3

    Gotyai API : the Spartan explainable AI   # noqa: E501

    The version of the OpenAPI document: 3.0.2
    Contact: contact@namsor.com
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from gotyai_client import schemas  # noqa: F401


class APIUsageAggregatedOut(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            timeUnit = schemas.StrSchema
            periodStart = schemas.Int64Schema
            periodEnd = schemas.Int64Schema
            totalUsage = schemas.Int64Schema
            historyTruncated = schemas.BoolSchema
            
            
            class data(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.Int32Schema
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, list, tuple, ]], typing.List[typing.Union[MetaOapg.items, list, tuple, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'data':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class colHeaders(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'colHeaders':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class rowHeaders(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rowHeaders':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "timeUnit": timeUnit,
                "periodStart": periodStart,
                "periodEnd": periodEnd,
                "totalUsage": totalUsage,
                "historyTruncated": historyTruncated,
                "data": data,
                "colHeaders": colHeaders,
                "rowHeaders": rowHeaders,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeUnit"]) -> MetaOapg.properties.timeUnit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodStart"]) -> MetaOapg.properties.periodStart: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodEnd"]) -> MetaOapg.properties.periodEnd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalUsage"]) -> MetaOapg.properties.totalUsage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["historyTruncated"]) -> MetaOapg.properties.historyTruncated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["colHeaders"]) -> MetaOapg.properties.colHeaders: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rowHeaders"]) -> MetaOapg.properties.rowHeaders: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["timeUnit", "periodStart", "periodEnd", "totalUsage", "historyTruncated", "data", "colHeaders", "rowHeaders", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeUnit"]) -> typing.Union[MetaOapg.properties.timeUnit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodStart"]) -> typing.Union[MetaOapg.properties.periodStart, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodEnd"]) -> typing.Union[MetaOapg.properties.periodEnd, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalUsage"]) -> typing.Union[MetaOapg.properties.totalUsage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["historyTruncated"]) -> typing.Union[MetaOapg.properties.historyTruncated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> typing.Union[MetaOapg.properties.data, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["colHeaders"]) -> typing.Union[MetaOapg.properties.colHeaders, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rowHeaders"]) -> typing.Union[MetaOapg.properties.rowHeaders, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timeUnit", "periodStart", "periodEnd", "totalUsage", "historyTruncated", "data", "colHeaders", "rowHeaders", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        timeUnit: typing.Union[MetaOapg.properties.timeUnit, str, schemas.Unset] = schemas.unset,
        periodStart: typing.Union[MetaOapg.properties.periodStart, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        periodEnd: typing.Union[MetaOapg.properties.periodEnd, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        totalUsage: typing.Union[MetaOapg.properties.totalUsage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        historyTruncated: typing.Union[MetaOapg.properties.historyTruncated, bool, schemas.Unset] = schemas.unset,
        data: typing.Union[MetaOapg.properties.data, list, tuple, schemas.Unset] = schemas.unset,
        colHeaders: typing.Union[MetaOapg.properties.colHeaders, list, tuple, schemas.Unset] = schemas.unset,
        rowHeaders: typing.Union[MetaOapg.properties.rowHeaders, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'APIUsageAggregatedOut':
        return super().__new__(
            cls,
            *_args,
            timeUnit=timeUnit,
            periodStart=periodStart,
            periodEnd=periodEnd,
            totalUsage=totalUsage,
            historyTruncated=historyTruncated,
            data=data,
            colHeaders=colHeaders,
            rowHeaders=rowHeaders,
            _configuration=_configuration,
            **kwargs,
        )
